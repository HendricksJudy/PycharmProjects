# zip 函数

'''
zip函数是可以接收多个可以迭代的对象，然后把每个可迭代对象的第i个元素组合在一起，形成一个新元组的迭代器
参数：*iterables， 任意个的可迭代对象
返回值； 返回一个元组的迭代器
'''

# var1 = '1234'
# var2 = ['a', 'b', 'c', 'd']  # 注意如果各组无法一一对应，则产生的元组元素个数以最少组元素个数为准
# var3 = ['A', 'B', 'C', 'D']
# # 调用zip函数，组成新的元组迭代器
# res = zip(var1, var2, var3)
# print(res, type(res))

# 提取迭代器数据的方法， next(), list(), for i in

# list（）
# print(list(res))
'''
[('1', 'a', 'A'), ('2', 'b', 'B'), ('3', 'c', 'C'), ('4', 'd', 'D')]
'''


# for 循环遍历法
# for i in res:
#     print(i)
'''
('1', 'a', 'A')
('2', 'b', 'B')
('3', 'c', 'C')
('4', 'd', 'D')
'''

# v1 = [1, 2, 3, 4]
# v2 = [22, 33, 44, 55]
# resd = zip(v1, v2)
# print(list(resd))
'''
[(1, 22), (2, 33), (3, 44), (4, 55)]  矩阵计算
'''


# zip() 与 * 运算符相结合可以用来拆解一个列表：x = [1, 2, 3]
x = [1, 2, 3]
y = [4, 5, 6]
zipped = zip(x, y)  # 迭代器对象
print(list(zipped))  # 组合好的多个元组数据
x2, y2 = zip(*zip(x, y))
# print(x == list(x2) and y == list(y2))
print(x2, y2)
'''
[(1, 4), (2, 5), (3, 6)]
(1, 2, 3) (4, 5, 6)
'''